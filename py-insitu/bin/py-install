#!/bin/bash

# Created by argbash-init v2.10.0
# DEFINE_SCRIPT_DIR([_script_dir])
#
# ARG_OPTIONAL_BOOLEAN([dry-run],[],[Display Commands])
#
# ARG_OPTIONAL_ACTION([info],[],[Show python install info],[show_paths])
# ARG_OPTIONAL_ACTION([make],[],[Configure/Make python],[make_pytho])
# ARG_OPTIONAL_ACTION([download],[],[Download/Unpack Python *.tgz],[download_python])
# ARG_OPTIONAL_ACTION([install-python],[],[Install python to .local/python/],[install_python])
# ARG_OPTIONAL_ACTION([install-env],[],[Install env to .local/envs/],[install_env])
# ARG_OPTIONAL_ACTION([all],[],[Download/Make/Install/Setup Everything],[run_all])
#
# ARG_HELP([<Python/virtual env download/make/install>])
#
# ARGBASH_PREPARE()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_dry_run="off"


print_help()
{
	printf '%s\n' "<Python/virtual env download/make/install>"
	printf 'Usage: %s [--(no-)dry-run] [--info] [--make] [--download] [--install-python] [--install-env] [--all] [-h|--help]\n' "$0"
	printf '\t%s\n' "--dry-run, --no-dry-run: Display Commands (off by default)"
	printf '\t%s\n' "--info: Show python install info"
	printf '\t%s\n' "--make: Configure/Make python"
	printf '\t%s\n' "--download: Download/Unpack Python *.tgz"
	printf '\t%s\n' "--install-python: Install python to .local/python/"
	printf '\t%s\n' "--install-env: Install env to .local/envs/"
	printf '\t%s\n' "--all: Download/Make/Install/Setup Everything"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--no-dry-run|--dry-run)
				_arg_dry_run="on"
				test "${1:0:5}" = "--no-" && _arg_dry_run="off"
				;;
			--info)
				show_paths
				exit 0
				;;
			--make)
				make_pytho
				exit 0
				;;
			--download)
				download_python
				exit 0
				;;
			--install-python)
				install_python
				exit 0
				;;
			--install-env)
				install_env
				exit 0
				;;
			--all)
				run_all
				exit 0
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}


# OTHER STUFF GENERATED BY Argbash
_script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)" || { echo "Couldn't determine the script's running directory, which probably matters, bailing out" >&2; exit 2; }

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# shellcheck disable=2154
readonly script_dir="$_script_dir"

source "$script_dir/_utils.sh"

# shellcheck disable=2154
source "$script_dir/paths.sh"

unpack_python() {
    echo "Unpacking Python $PYVER"
    with_dirs "$INSTALL_TMPD"
    if [ ! -d "$PYSRC" ]; then
        echo "Unpacking $PYTGZ => $PYSRC"
        doit tar -zxf "$PYTGZ"
    else
        echo "$PYSRC exists"
    fi

    if [ ! -d "$PYSRC" ]; then
        echo "Error unpacking $PYSRC"
        exit
    else
        echo "Unpacked Python $PYSRC"
    fi
}

download_python() {
    echo "Download Python $PYVER"
    with_dirs "$INSTALL_TMPD"
    if [ ! -f "$PYTGZ" ]; then
        echo "No $PYTGZ found, downloading"
        doit wget "$PYSRC_URL"
    fi
    if [ ! -f "$PYTGZ" ]; then
        echo "Could not download Python from $PYSRC_URL"
        exit 1
    fi
    if [ -f "$PYTGZ" ]; then
        echo "$PYTGZ downloaded"
    fi
    unpack_python
}

make_python() {
    echo "Making Python $PYVER"
    with_dirs "$INSTALL_TMPD" "$PYSRC"
    doit ./configure --prefix="$PYTHOND" --enable-optimizations --with-lto --enable-loadable-sqlite-extensions

    doit make clean
    doit make build_all
}

install_python() {
    with_dirs "$INSTALL_TMPD" "$PYSRC"
    echo "Making Python $PYVER"
    cd "$INSTALL_TMPD" || exit
    cd "$PYSRC" || exit

    doit rm -rf "$PYTHOND"
    doit mkdir -p "$PYTHOND"
    doit make install
    doit "$PYTHOND/bin/pip3" install --ignore-installed virtualenv
}

install_env() {
    with_dirs "$PROJECT_ROOT"
    echo "Deleting python envs $PYENVS/*"
    doit rm -rf "$PYENVS"
    doit mkdir -p "$PYENVS"
    doit "$PYTHOND/bin/virtualenv" "$ENV_ROOT"
}

run_all() {
    echo "Running Everything"
    download_python
    make_python
    install_python
    install_env
}

#########################
## Run Main
#########################
parse_commandline "$@"

## Print help if no other action has been taken
_PRINT_HELP=yes die "" 1

# ] <-- needed because of Argbash
